---
title: "Data Structures & Sociograms"
subtitle: "SNA Module 1: Code-Along"
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: img/LASERLogoB.png
    #theme: Cosmo
    theme: [default, css/laser.scss]
    width: 1920
    height: 1080
    margin: 0.05
    footer: <a href=https://www.go.ncsu.edu/laser-institute>go.ncsu.edu/laser-institute
highlight-style: a11y
#resources:
#  - demo.pdf
bibliography: lit/references.bib
editor: visual
---

## Data Intensive Research-Workflow

![From Learning Analytics Goes to School [@krumm2018]](img/workflow.png){width="300"}

::: notes
**Speaker Notes:**

Just as a quick refresher from our Learning Analytics Workflow Module, the workflow pictured here outlines a basic process intended to support researchers, practitioners, and data scientists prepare for a data-intensive analysis and communication of one’s findings. Different processes in this workflow as they relate to specific LA technique are highlighted in our code-along and presented in much greater detail in each case study. If you're interested in learning more about this workflow, I highly recommend the excellent book, Learning Analytics Goes to School, by Andrew Krumm, Barbara Means, and Marie Bienkowski.
:::

# Prepare

Guiding Research & Network Packages

```{python}
#| echo: false
#| results: hide
#| message: false
#| warning: false

import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt

student_friends = pd.read_excel("data/student-reported-friends.xlsx", header=None)

student_friends

student_attributes = pd.read_excel("data/student-attributes.xlsx")


student_attributes

teacher_friends = pd.read_excel("data/teacher-reported-friends.xlsx", header=None)

teacher_friends

teacher_network = nx.from_pandas_adjacency(teacher_friends, create_using=nx.DiGraph())
```

## Guiding Study

::: panel-tabset
## Context

::: columns
::: {.column width="70%"}
Revisiting early work in the field of sociometry, this study by @pittinsky2008behavioral **assesses the level of agreement between teacher perceptions and student reports of classroom friendships** among middle school students.
:::

::: {.column width="30%"}
![Behavioral vs. Cognitive Classroom Friendships [@pittinsky2008behavioral]](img/pittinsky-carolan.png){width="70%"}
:::
:::

## Questions

The central question guiding this investigation was:

> ***Do student reports agree with teacher perceptions*** when it comes to classroom friendship ties and with what consequences for commonly used social network measures?

## Data

-   1 teacher, 1 middle school, four classrooms

-   Students given roster and asked to evaluate relationships with peers

-   Choices included best friend, friend, know-like, know, know-dislike, strongly dislike, and do not know.

-   Relations are ***valued*** (degrees of friendship, not just yes or no)

-   Data are ***directed*** (friendship nominations were not presumed to be reciprocal).

## Findings

-   Teacher’s perceptions and students’ reports were statistically similar, 11–29% of possible ties did not match.

-   Students reported significantly more reciprocated friendship ties than the teacher perceived.

-   Observed level of agreement varied across classes and generally increased over time.
:::

::: notes
**Speaker Notes:**
:::

## Load Packages

::: panel-tabset
### Python Libraries

Let's start by creating a new Python script and loading some essential packages introduced in LA Workflows:

```{python}
import networkx as nx
import pandas as pd
import scipy as sp
import matplotlib.pyplot as plt
```

```{python}
#| echo: true
#| message: false

import pandas as pd
```

### NetworkX Package

::: columns
::: {.column width="30%"}
![](img/networkx.png){width="100%"}
:::

::: {.column width="70%"}
[NetworkX](https://networkx.org) is a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks.
:::
:::

### Your Turn

Use your Python script to import the {networkx} package `as nx`.

```{python}
#| echo: true
# YOUR CODE HERE
#
#
```
:::

::: notes
**Speaker Notes:**

NetworkX is a popular network analysis package for Python that includes:

-   Data structures for graphs, digraphs, and multigraphs

-   Many standard graph algorithms

-   Network structure and analysis measures

-   Generators for classic graphs, random graphs, and synthetic networks

-   Nodes can be "anything" (e.g., text, images, XML records)

-   Edges can hold attribute data (e.g., weights, time-series)
:::

# Wrangle

Intro to Network Data Structures

## Network Data Structures

::: panel-tabset
### Node-List

::: columns
::: {.column width="50%"}
Consistent with typical data storage, node-lists often include:

-   identifiers like name or **ID**

-   demographic info (**gender**, age)

-   socio-economic info (job, income)

-   substantive info (**grades**, attendance)
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| message: false
#| warning: false

# Read the CSV file into a DataFrame
student_attributes = pd.read_csv("data/student-attributes.csv")

# Display the table
student_attributes.head()

```
:::
:::

### Edge-List

::: columns
::: {.column width="50%"}
Radically different than typical data storage, edge-lists include:

-   ego and an alter

-   tie strength or frequency

-   edge attributes (time, event, text)
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| message: false
#| warning: false

student_edges = pd.read_csv("data/student-edgelist.csv")

student_edges.head()

```
:::
:::

### Adjacency Matrix

::: columns
::: {.column width="50%"}
Also radically different, an adjacency matrix includes:

-   column for each actor

-   row for each actor

-   a value indicating the presence/strength of a relation
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| message: false
#| warning: false

df = teacher_friends.iloc[:5, :5]

df.head()

```
:::
:::

### Discuss

Take a look at one of the network datasets in the data folder under the Files Tab in RStudio and consider the following:

-   What format is this data set stored as?

-   If edge data, is it directed or undirected? Valued?

-   If node data, does the file contain attribute data?

-   What are some things you notice about this dataset?

-   What questions do you have about this dataset?
:::

## Import Data

::: panel-tabset
### Read Data

Let's start by importing two CSV files that contain data about the nodes and the edges in our student-reported friendship network:

```{python}
#| echo: true
#| message: false
#| eval: false

student_nodes = pd.read_csv("lab-1/data/student-attributes.xlsx")

student_edges = pd.read_csv("lab-1/data/student-edgelist.xlsx")

```

```{python}
#| echo: false
#| message: false
#| eval: true

student_nodes = pd.read_csv("data/student-attributes.csv")

student_edges = pd.read_csv("data/student-edgelist.csv")

```

### Inspect Data

Now let's take a look at the data file we just imported using the `print()` function or another function of choice you may have learned previously:

```{python}
#| echo: true
#| message: false
#| eval: false

print(student_edges)
print(student_nodes)
```

### Discuss

Think about the questions below and be prepared to share your response:

1.  What do you think the rows and columns in each file represent?

2.  What about the values in each cell represent?

3.  What else do you notice about the data?

4.  What questions do you have?
:::

## A Network Object

::: panel-tabset
### from_pandas_edgelist( ) function

Run the following code in your R script:

```{python}
#| echo: true
#| warning: false
#| message: false

student_network = nx.from_pandas_edgelist(student_edges, 
                                          source='from', 
                                          target='to', 
                                          create_using=nx.DiGraph())


```

The `from_pandas_edgelist()` function creates a special network data structure called a "tidy graph" that combines our nodes and edges into a single R object.

### Print Network

Using your Python script, `print()` the network object we just created and run the code to produce the output on the next tab:

```{python}
#| echo: true
# ADD CODE BELOW
#
#
```

### Output

You should see an output that looks something like this:

```{python}
#| echo: false
print(student_network)

```

### Discuss

Think about the questions below:

1.  What is size of the student-reported friendship network?

2.  What else do you notice about this network?

3.  What questions do have about this network summary?
:::

# Explore

Making Simple and Sophisticated Sociograms

## A Simple Sociogram

::: panel-tabset
## nx.draw()

::: columns
::: {.column width="50%"}
Run the following code to make a simple sociogram:

```{python}
#| echo: true
#| fig.show: hide
#| eval: false
nx.draw(student_network)
```

<br>

The `draw()` function is a simple function for quickly plotting graphs using the {networkx} package.
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| fig-asp: .75
nx.draw(student_network)
```
:::
:::

## Arguments

::: columns
::: {.column width="50%"}
Both functions allow a small degree of customization, but are still limited.

```{python}
#| echo: true
#| fig.show: hide
nx.draw(student_network, with_labels=True, font_weight='bold') 
```
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| fig.asp: .75
nx.draw(student_network, with_labels=True, font_weight='bold') 
plt.show()
```
:::
:::

## Discuss

1.  In what situations might these limited functions be useful?
2.  When might they inappropriate to use?
:::

## A Sophisticated Sociogram

::: panel-tabset
### Set Graph

The `ggraph()` function is the first function required to build a sociogram. Try running this function on out `student_network` and see what happens:

```{python}
#library(tidygraph)

#ggraph(student_network)
```

This function serves two critical roles:

1.  It takes care of setting up the plot object for the network specified.

2.  It creates the layout based on algorithm provided.

### "Add" Nodes

::: columns
::: {.column width="50%"}
Let's “add” nodes to our sociogram using the `+` operator and the `geom_node_point()` function:

```{python}
#| echo: true
#| fig.show: hide
#| message: false
#ggraph(student_network) + 
 # geom_node_point() 
```
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| fig.asp: .75
#ggraph(student_network) + 
#  geom_node_point() 
```
:::
:::

### "Add" Edges

::: columns
::: {.column width="50%"}
Both functions allow a small degree of customization, but are still limited.

```{python}
#| echo: true
#| fig.show: hide
#ggraph(student_network) + 
#  geom_node_point() + 
#  geom_edge_link()
```
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| fig.asp: .75
#ggraph(student_network) + 
#  geom_node_point() + 
#  geom_edge_link()
```
:::
:::

### Polish

::: columns
::: {.column width="50%"}
<br> <br> The {ggraph} packages allows for some very fairly sophisticated sociograms...
:::

::: {.column width="50%"}
```{python}
#| echo: false
#| fig.asp: .75
#ggraph(student_network, layout = "stress") + 
#  geom_edge_link(arrow = arrow(length = unit(1, 'mm')), 
#                 end_cap = circle(3, 'mm'),
#                 start_cap = circle(3, 'mm'),
#                 alpha = .1) +
#  geom_node_point(aes(size = local_size(),
#                      color = gender)) +
#  geom_node_text(aes(label = id),
#                 repel=TRUE) +
#  theme_graph()
```
:::
:::

### Code

With a fair bit of coding:

```{python}
#| echo: true
#| fig.show: hide
#ggraph(student_network, layout = "stress") + 
#  geom_edge_link(arrow = arrow(length = unit(1, 'mm')), 
#                 end_cap = circle(3, 'mm'),
#                 start_cap = circle(3, 'mm'),
#                 alpha = .1) +
#  geom_node_point(aes(size = local_size(),
#                      color = gender)) +
#  geom_node_text(aes(label = id),
#                 repel=TRUE) +
#  theme_graph()
```
:::

## What's Next?

-   SNA Case Study: [Who's Friends with Who in Middle School?](https://laser-institute.github.io/network-analysis/lab-1/sna-lab-1-case-study-key.html)

-   Guiding Study: [Behavioral versus cognitive classroom friendship networks.](https://github.com/laser-institute/essential-readings/blob/main/sna-labs/sna-lab-1/pittinsky-class-friendships.pdf)

## Acknowledgements

::: columns
::: {.column width="20%"}
![](img/nsf.jpg){fig-align="center" width="80%"}
:::

::: {.column width="80%"}
This work was supported by the National Science Foundation grants DRL-2025090 and DRL-2321128 (ECR:BCSER). Any opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.
:::
:::

## References
